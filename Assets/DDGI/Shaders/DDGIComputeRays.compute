// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main

#include "RayTraceUtilities.cginc"
#include "RandomUtilities.cginc"
#include "SampleIrradianceField.cginc"

StructuredBuffer<float3> ProbesPositions;

RWTexture2D<float4> rayDirections;
RWTexture2D<float4> rayHitLocations;
RWTexture2D<float4> rayHitRadiance;
RWTexture2D<float4> rayHitNormals;
RWTexture2D<float4> rayOrigins;

float4x4 randomOrientation;
float4 sunColor;
float3 sunDirection;

//DEBUG
int Frame;

[numthreads(8,8,1)]
void main(uint3 id : SV_DispatchThreadID) 
{
    L = LBuffer[0];
    
    uint2 texelPos = uint2(id.x, id.y);

    // uint2 dim;
    // rayDirections.GetDimensions(dim.x, dim.y);
    // if(texelPos.x >= dim.x || texelPos.y >= dim.y) return;

    Ray ray;
    ray.direction = normalize(float3(mul(sphericalFibonacci((float) texelPos.x, (float) NumRaysPerProbe), (float3x3) randomOrientation))); //rayId = texelPos.x
    ray.origin = ProbesPositions[texelPos.y]; //probeId = texelPos.y
    ray.tMin = 0.01;
    ray.tMax = 20.0;

    HitInfo info;
    float4 allLight = float4(0,0,0,0);
    if (TraceRay(ray, info))
    {
        float3 viewVec = normalize(ray.origin.xyz-info.hitPoint);
        float4 indirectL = float4(SampleIrradianceField(info.hitPoint, info.normal, L.energyConservation, viewVec), 0);
        Ray shadowRay;
        shadowRay.direction = -sunDirection;
        shadowRay.origin = info.hitPoint;
        shadowRay.tMin = 0.01;
        shadowRay.tMax = 20.0;
        int lit = !TraceRaySimple(shadowRay); //sHit ? 0 : 1;
        float4 directL = max(dot(-sunDirection, info.normal),0.0) * sunColor * lit;
        allLight = (directL + indirectL) * info.material.colour;
    }

    float d = max(dot(-sunDirection,info.normal),0);
    rayDirections[texelPos] = float4(ray.direction,0);
    rayHitLocations[texelPos] = info.didHit ? float4(info.hitPoint,0) : float4(0,0,0,0);
    rayHitRadiance[texelPos] = allLight;
    rayHitNormals[texelPos] = info.didHit ? float4(info.normal,0) : float4(0,0,0,0);
    rayOrigins[texelPos] = float4(ray.origin, info.dst);
}