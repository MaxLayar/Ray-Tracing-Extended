#pragma kernel mainWriteOnesToBorder
#pragma kernel mainDuplicateProbeEdges

#pragma multi_compile_local __ DEBUG_MODE

#include "ShaderUtilities.cginc"

Texture2D<float4> probesBuffer;
SamplerState sampler_probesBuffer;
uint2 probesBufferSize;

RWTexture2D<float4> Result;

float PROBE_SIDE_LENGTH;

#ifdef DEBUG_MODE
RWTexture2D<float4> debugTex;
#endif


bool isAtProbeBorder(uint2 pos, out bool isAtProbeX, out bool isAtProbeY)
{
    uint gap = PROBE_SIDE_LENGTH + 2;
    isAtProbeX = (pos.x % gap == 0) || ((pos.x % gap) == gap - 1);
    isAtProbeY = (pos.y % gap == 0) || ((pos.y % gap) == gap - 1);
    return isAtProbeX || isAtProbeY;
}


uint mirrored(uint pos)
{
    uint gap = 2 + PROBE_SIDE_LENGTH;
    uint probe = pos / gap;
    uint startPoint = probe * gap;
    float midPoint = startPoint + (gap-1) * .5;
    float dst = midPoint - pos;
    return pos + dst * 2;
}


/*
XXX|XXX
Xxx|xxX
Xxx|xxX
Xxx|xxX
Xxx|xxX
XXX|XXX <-- on this half?
^-- or on this half? 
*/
int leftOrRight(int pos)
{
    uint gap = 2 + PROBE_SIDE_LENGTH;
    uint posInProbe = pos % gap;
    uint middle = gap * .5;
    return posInProbe < middle ? 1 : -1;
}

[numthreads(8,8,1)]
void mainWriteOnesToBorder(uint3 id : SV_DispatchThreadID) 
{   
    uint2 texelPos = uint2(id.x, id.y);

    bool _;
    float4 val = float4(1,1,1,1) * isAtProbeBorder(texelPos,_,_);
    Result[texelPos] = val;

#ifdef DEBUG_MODE
    debugTex[texelPos] = val;
#endif
}

[numthreads(8,8,1)]
void mainDuplicateProbeEdges(uint3 id : SV_DispatchThreadID) 
{   
    uint2 texelPos = uint2(id.x, id.y);

    bool isAtBorderX, isAtBorderY;

    if(isAtProbeBorder(texelPos,isAtBorderX,isAtBorderY))
    {
        if(isAtBorderX && isAtBorderY)
        {
            float2 offsetPos = float2(texelPos.x + PROBE_SIDE_LENGTH * leftOrRight(texelPos.x),
                texelPos.y + PROBE_SIDE_LENGTH * leftOrRight(texelPos.y));
            float4 texelToCopy = probesBuffer.SampleLevel(sampler_probesBuffer, offsetPos/probesBufferSize, 0);

            Result[texelPos] = texelToCopy;
            #ifdef DEBUG_MODE
            debugTex[texelPos] = texelToCopy;
            #endif
            return;
        }

        if(isAtBorderX)
        {
            int pos = mirrored(texelPos.y);
            int toAdd = leftOrRight(texelPos.x);
            float4 texelToCopy = probesBuffer.SampleLevel(sampler_probesBuffer, float2(texelPos.x + toAdd, pos)/probesBufferSize, 0);

            Result[texelPos] = texelToCopy;
            #ifdef DEBUG_MODE
            debugTex[texelPos] = texelToCopy;
            #endif
            return;
        }
        
        if(isAtBorderY)
        {
            int pos = mirrored(texelPos.x);
            int toAdd = leftOrRight(texelPos.y);
            float4 texelToCopy = probesBuffer.SampleLevel(sampler_probesBuffer, float2(pos, texelPos.y + toAdd)/probesBufferSize, 0);

            Result[texelPos] = texelToCopy;
            #ifdef DEBUG_MODE
            debugTex[texelPos] = texelToCopy;
            #endif
            return;
        }
    }

    #ifdef DEBUG_MODE
    debugTex[texelPos] = probesBuffer.SampleLevel(sampler_probesBuffer, texelPos, 0);
    #endif
}




